<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->


<!--- The default skin class for the Spark CheckBox component.

	  @see spark.components.CheckBox

	  @langversion 3.0
	  @playerversion Flash 10
	  @playerversion AIR 1.5
	  @productversion Flex 4
-->
<s:SparkSkin alpha.disabledStates="0.5"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark">

	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.CheckBox")]
    ]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		//=================================
		// private static properties 
		//=================================

		/* Define the skin elements that should not be colorized.
		   For button, the graphics are colorized but the label is not. */
		private static const exclusions : Array = [ "labelDisplay" , "check" ];

		/* Define the symbol fill items that should be colored by the "symbolColor" style. */
		private static const symbols : Array = [ "checkMarkFill" ];


		//=================================
		// public properties 
		//=================================

		/**
		 * @private
		 */
		override public function get colorizeExclusions() : Array
		{
			return exclusions;
		}

		/**
		 * @private
		 */
		override public function get symbolItems() : Array
		{
			return symbols
		}

		//=================================
		// protected methods 
		//=================================

		/**
		 * @private
		 */
		override protected function initializationComplete() : void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		;
	</fx:Script>

	<fx:Script>
		<![CDATA[
			import spark.components.supportClasses.LabelPlacement;

			//=================================
			// private static properties 
			//=================================

			/**
			 * @private
			 */
			private static const focusExclusions : Array = [ "labelDisplay" ];


			//=================================
			// public properties 
			//=================================

			/**
			 * @private
			 */
			override public function get focusSkinExclusions() : Array
			{
				return focusExclusions;
			}

			//=================================
			// protected properties 
			//=================================

			[Bindable] protected var useCheckMark : Boolean = true;

			//--------------------------------------------------------------------------
			//
			//  Overridden methods
			//
			//--------------------------------------------------------------------------

			/**
			 *  @copy mx.core.UIComponent#styleChanged
			 *
			 *  @langversion 3.0
			 *  @playerversion Flash 11.8
			 *  @playerversion AIR 3.8
			 *  @productversion Flex 4.12
			 */
			override public function styleChanged( styleProp : String ) : void
			{
				super.styleChanged( styleProp );

				//Check if the style is null for mass style changes or if the labelPlacement/gap styles were changed.
				if( styleProp == "labelPlacement" || styleProp == "gap" || styleProp === null )
				{
					updateLabelPlacement();
				}

				if( styleProp == "useCheckMark" || styleProp === null )
				{
					var ucm : * = getStyle( "useCheckMark" );

					if( ucm is Boolean )
						useCheckMark = ucm;
					else
						useCheckMark = true;
				}
			}


			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------

			/**
			 *  Sets the label placement in relation to the checkbox.
			 *  Requires the SkinParts <code>checkDisplay</code> and <code>labelDisplay</code>.
			 *
			 *  @langversion 3.0
			 *  @playerversion Flash 11.8
			 *  @playerversion AIR 3.8
			 *  @productversion Flex 4.12
			 */
			public function updateLabelPlacement() : void
			{
				var spacing : int;


				if( !checkDisplay || !labelDisplay )
				{
					return;
				}

				if( getStyle( "gap" ) == undefined )
				{
					//Add a default gap if the gap style is undefined.
					spacing = 5;
				}
				else
				{
					spacing = int( getStyle( "gap" ) );
				}


				switch( String( getStyle( "labelPlacement" ) ).toLowerCase() )
				{
					case LabelPlacement.BOTTOM:
					{
						//Adjust the labels position to the bottom.
						labelDisplay.horizontalCenter = 0;
						labelDisplay.verticalCenter = undefined;
						labelDisplay.top = checkDisplay.height + spacing;
						labelDisplay.bottom = 0;
						labelDisplay.left = 0;
						labelDisplay.right = 0;

						//Adjust the checkboxes position to the top.
						checkDisplay.horizontalCenter = 0;
						checkDisplay.verticalCenter = undefined;
						checkDisplay.top = 0;
						checkDisplay.bottom = undefined;

						break;
					}

					case LabelPlacement.LEFT:
					{
						//Adjust the labels position to left side.
						labelDisplay.horizontalCenter = undefined;
						labelDisplay.verticalCenter = 2;
						labelDisplay.top = 3;
						labelDisplay.bottom = 3;
						labelDisplay.left = 0;
						labelDisplay.right = checkDisplay.width + spacing;

						//Adjust the checkboxes position to right side.
						checkDisplay.horizontalCenter = undefined;
						checkDisplay.verticalCenter = 0;
						checkDisplay.left = undefined;
						checkDisplay.right = 0;

						break;
					}

					case LabelPlacement.TOP:
					{
						//Adjust the labels position to the top.
						labelDisplay.horizontalCenter = 0;
						labelDisplay.verticalCenter = undefined;
						labelDisplay.top = 0;
						labelDisplay.bottom = checkDisplay.height + spacing;
						labelDisplay.left = 0;
						labelDisplay.right = 0;

						//Adjust the checkboxes position to the bottom.
						checkDisplay.horizontalCenter = 0;
						checkDisplay.verticalCenter = undefined;
						checkDisplay.top = undefined;
						checkDisplay.bottom = 0;

						break;
					}

					//Making the rightside labelPlacement the default.
					case LabelPlacement.RIGHT:
					default:
					{
						//Adjust the labels position to right side.
						labelDisplay.horizontalCenter = undefined;
						labelDisplay.verticalCenter = 2;
						labelDisplay.top = 3;
						labelDisplay.bottom = 3;
						labelDisplay.left = checkDisplay.width + spacing;
						labelDisplay.right = 0;

						//Adjust the checkboxes position to left side.
						checkDisplay.horizontalCenter = undefined;
						checkDisplay.verticalCenter = 0;
						checkDisplay.left = 0;
						checkDisplay.right = undefined;

						break;
					}
				}
			}

			//=================================
			// protected methods 
			//=================================

			override protected function updateDisplayList( unscaledWidth : Number , unscaledHeight : Number ) : void
			{
				super.updateDisplayList( unscaledWidth , unscaledHeight );

				//styleChanged( "useCheckMark" );
			}

		]]>
	</fx:Script>

	<fx:Declarations>

		<s:SolidColor id="checkMarkFill"
			alpha="0.8"
			color="0" />
	</fx:Declarations>

	<s:states>

		<s:State name="up" />

		<s:State name="over"
			stateGroups="overStates" />

		<s:State name="down"
			stateGroups="downStates" />

		<s:State name="disabled"
			stateGroups="disabledStates" />

		<s:State name="upAndSelected"
			stateGroups="selectedStates" />

		<s:State name="overAndSelected"
			stateGroups="overStates, selectedStates" />

		<s:State name="downAndSelected"
			stateGroups="downStates, selectedStates" />

		<s:State name="disabledAndSelected"
			stateGroups="disabledStates, selectedStates" />
	</s:states>

	<!-- Checkbox container -->

	<!--- Group that houses the CheckBox and check -->
	<s:Group id="checkDisplay"
		height="13"
		layoutDirection="ltr"
		verticalCenter="0"
		width="13">

		<!-- drop shadow -->
		<s:Rect bottom="-1"
			left="-1"
			right="-1"
			top="-1">

			<s:stroke>

				<s:LinearGradientStroke rotation="90"
					weight="1">

					<s:GradientEntry alpha="0.011"
						alpha.downStates="0"
						color="0x000000"
						color.downStates="0xFFFFFF" />

					<s:GradientEntry alpha="0.121"
						alpha.downStates="0.57"
						color="0x000000"
						color.downStates="0xFFFFFF" />
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>

		<!-- fill -->
		<s:Rect bottom="1"
			left="1"
			right="1"
			top="1">

			<s:fill>

				<s:LinearGradient rotation="90">

					<s:GradientEntry alpha="0.85"
						color="0xFFFFFF"
						color.downStates="0xAAAAAA"
						color.overStates="0xBBBDBD" />

					<s:GradientEntry alpha="0.85"
						color="0xD8D8D8"
						color.downStates="0x929496"
						color.overStates="0x9FA0A1" />
				</s:LinearGradient>
			</s:fill>
		</s:Rect>

		<!-- fill highlight -->
		<s:Rect height="5"
			left="1"
			right="1"
			top="1">

			<s:fill>

				<s:SolidColor alpha="0.33"
					alpha.downStates="0"
					color="0xFFFFFF" />
			</s:fill>
		</s:Rect>

		<!-- layer 6: highlight stroke (all states except down) -->
		<s:Rect bottom="1"
			excludeFrom="downStates"
			left="1"
			right="1"
			top="1">

			<s:stroke>

				<s:LinearGradientStroke rotation="90"
					weight="1">

					<s:GradientEntry alpha.overStates="0.33"
						color="0xFFFFFF" />

					<s:GradientEntry alpha="0.12"
						alpha.overStates="0.0396"
						color="0xFFFFFF" />
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>

		<!-- layer 6: highlight stroke (down state only) -->
		<s:Rect bottom="1"
			includeIn="downStates"
			left="1"
			top="1"
			width="1">

			<s:fill>

				<s:SolidColor alpha="0.07"
					color="0x000000" />
			</s:fill>
		</s:Rect>

		<s:Rect bottom="1"
			includeIn="downStates"
			right="1"
			top="1"
			width="1">

			<s:fill>

				<s:SolidColor alpha="0.07"
					color="0x000000" />
			</s:fill>
		</s:Rect>

		<s:Rect height="1"
			includeIn="downStates"
			left="1"
			right="1"
			top="1">

			<s:fill>

				<s:SolidColor alpha="0.25"
					color="0x000000" />
			</s:fill>
		</s:Rect>

		<s:Rect height="1"
			includeIn="downStates"
			left="1"
			right="1"
			top="2">

			<s:fill>

				<s:SolidColor alpha="0.09"
					color="0x000000" />
			</s:fill>
		</s:Rect>

		<!-- border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
		<s:Rect bottom="0"
			left="0"
			right="0"
			top="0">

			<s:stroke>

				<s:LinearGradientStroke rotation="90"
					weight="1">

					<s:GradientEntry alpha="0.5625"
						alpha.downStates="0.6375"
						color="0x000000" />

					<s:GradientEntry alpha="0.75"
						alpha.downStates="0.85"
						color="0x000000" />
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>

		<!-- checkmark -->

		<!--- The checkmark in the box for this skin. To create a custom check mark, create a custom skin class. -->

		<s:Group id="check"
			bottom="0"
			includeIn="selectedStates"
			itemCreationPolicy="immediate"
			left="0"
			right="0"
			top="0">

			<s:Path data="M 9.2 0.1 L 4.05 6.55 L 3.15 5.0 L 0.05 5.0 L 4.6 9.7 L 12.05 0.1 L 9.2 0.1"
				fill="{ checkMarkFill }"
				left="2"
				top="0"
				visible="{ useCheckMark }" />

			<s:Rect bottom="3"
				fill="{ checkMarkFill }"
				left="3"
				right="4"
				top="3"
				visible="{ !useCheckMark }" />
		</s:Group>
	</s:Group>

	<!-- Label -->

	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay"
		bottom="3"
		left="18"
		maxDisplayedLines="1"
		right="0"
		textAlign="start"
		top="3"
		verticalAlign="middle"
		verticalCenter="2" />

</s:SparkSkin>
